# Github Actions allow us to automate our Build/Test/Deployments 
# Keyword: 
# Event - Based on what event do you want to trigger the workflow i.e on: push: (represents when a change has been pushed)
# Runners - Container environment to which where the workflow will be ran. By default we run this in a Ubuntu environment
# Jobs - Specify what job you want to run or achieve i.e Build App and Deploy to AWS ECS 
# Steps - You may have one or more steps to achieve the job i.e Checkout, Build app, Build Docker image, Push to ECR, Deploy to ECS. These are all steps to achieve a job
# Actions - Is a resusable piece of workflow. So you can create a workflow known as an action and invoke it. These actions can take input parameters and also have output parameters which you can reference later in your job

# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.


name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: eu-north-1                      # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: images/clean-application    # set this to your Amazon ECR repository name
  ECS_SERVICE: clean-application-api-service              # set this to your Amazon ECS service name
  ECS_CLUSTER: CleanApplicationCluster                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: .github/workflows/cleanApplicationTaskDefinition.json # set this to the path to your Amazon ECS task definition file, e.g. .aws/task-definition.json
  CONTAINER_NAME: clean-application-api           # set this to the name of the container in the containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest 
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up .Net Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0'

    - name: Restore Dependancies 
      run: dotnet restore CleanProject.sln

    - name: Build App 
      run: dotnet publish ./CleanProject/CleanProject.API.csproj -c Release -o ./publish 

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -f ./CleanProject/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
